// Context update (October 15, 2025): Task priorities now reference the “Atlas” AI context; translate legacy context identifiers when reconciling backlogs.

task {
  name: "Software Presenter Zero-Copy Buffer [PERF]"
  description: "Eliminate framebuffer memcpy by backing PathSurfaceSoftware with an IOSurface shared directly with CAMetalLayer."
  status: completed
  priority: P1

  acceptance_criteria: [
    "PathSurfaceSoftware allocates/owns an IOSurface that the renderer writes into directly; no std::vector memcpy in copy_buffered_frame.",
    "Presenter binds the IOSurface (or texture alias) without copying, and the paint_example runs fullscreen without regressions.",
    "Docs updated (AI_Plan_SceneGraph_Renderer.md, AI_ARCHITECTURE.md) to reflect the zero-copy pipeline; tests cover the new path."
  ]

  steps: [
    "Refactor PathSurfaceSoftware to allocate IOSurface-backed memory and expose the relevant descriptors.",
    "Update presenter/Builders to consume the shared resource, removing the fallback memcpy code path.",
    "Add regression tests/benchmarks exercising fullscreen presents to verify zero-copy performance."
  ]
}

task {
  name: "CAMetalLayer Range Group Reuse [PERF]"
  description: "Reuse IOSurface instances during CAMetalLayer presents so extended UI sessions do not exhaust range groups."
  status: completed
  priority: P1

  acceptance_criteria: [
    "Presenter reuses a bounded IOSurface pool; no per-frame allocations during steady-state painting.",
    "Long-duration paint_example runs show no 'Failed to allocate segment' errors.",
    "Instrumentation gated behind PATHSPACE_DEBUG_IOSURFACE=1 captures resize/allocation events."
  ]

  steps: [
    "Introduce a small IOSurface reuse pool in WindowEventPump, rotating through surfaces matching the current drawable size.",
    "Ensure PathSurfaceSoftware only reallocates IOSurfaces when the size changes.",
    "Add optional logging to confirm allocation behaviour during debugging runs."
  ]
}

  task {
    name: "Renderer Benchmarking [PERF]"
    description: "Instrument PathRenderer2D phases (damage diff, encode, progressive copy, IOSurface publish, presenter blit) and capture 4K vs small-surface timings; reuse the new benchmark harness for automation."
    status: completed
    priority: P1
    acceptance_criteria: [
      "Benchmark harness reports per-phase timings for 4K_full, 4K_incremental, and sub-2K cases.",
      "Results summarized in docs/SceneGraphImplementationPlan.md with bottleneck callouts."
    ]
    steps: [
      "Instrument damage diff and encode loops with timers in benchmark build.",
      "Capture IOSurface allocation/publish metrics under repeated full-surface runs.",
      "Document findings and update paint_example plan."
    ]
  }

task {
  name: "Software Renderer FPS Parity [PERF]"
  description: "Bring 4K window frame rate in line with small-window performance by reducing per-frame copy work and parallelizing progressive tile fan-out."
  status: in_progress
  priority: P1

  acceptance_criteria: [
    "Progressive tile copy loop uses all available cores; per-frame copy metrics captured before/after.",
    "Dirty-hint bucketing or adaptive tile sizing keeps copied pixel counts proportional to brush area, not full-surface area.",
    "paint_example maintains ≥75 FPS at 2560×1600 and ≥70 FPS at 3840×2160 on reference hardware, with PATHSPACE_TRACE_DAMAGE logs confirming bounded damage regions.",
    "Docs updated (SceneGraphImplementationPlan.md, AI_Plan_SceneGraph_Renderer.md) with the new algorithm and performance results."
  ]

  steps: [
    "Fork progressive tile copy to a worker pool; measure scaling vs core count.",
    "Prototype adaptive tile sizing or merge heuristics that shrink damage for narrow hints.",
    "Assess IOSurface reuse/presenter path to avoid full-buffer copies when not required.",
    "Capture before/after traces (PATHSPACE_TRACE_DAMAGE=1) and summarize in docs."
  ]
}

task {
  name: "Paint Demo Stroke Compositing [EXP]"
  description: "Prototype a compositing path so paint_example bakes strokes into a persistent texture (or coalesced drawable) instead of retaining every rect command."
  status: optional
  priority: P2

  acceptance_criteria: [
    "Prototype keeps paint_example FPS stable during long sessions by constraining drawable growth.",
    "Toggle or config documented so regression tests can keep exercising the existing stroke-per-drawable path."
  ]

  steps: [
    "Investigate lightweight texture compositing or stroke decimation strategies for the demo.",
    "Measure performance vs. current approach and capture findings in docs/SceneGraphImplementationPlan.md.",
    "Decide whether to upstream as default or leave as optional mode."
  ]
}

task {
  name: "Wait/Watch Semantics [EPIC]"
  description: "Unify wait/notify semantics and read-blocking behavior under one coherent model, including glob watches, time-slicing, and backpressure guidance."
  status: planned
  priority: P1

  task {
    name: "Glob Watch Support [FEATURE]"
    description: "Align wait/notify with WaitMap's glob semantics to unify blocking reads and notifications."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Waiting on a glob path (e.g., \"/a/*/c\") wakes on matching concrete notifications.",
      "Existing glob tests are extended or mirrored to cover WatchRegistry paths.",
      "No deadlocks or self-wake races; loop=15 remains green."
    ]
    steps: [
      "Index glob waiters efficiently; avoid O(N) scans.",
      "Use the same registry for concrete and glob waiters in PathSpace::out.",
      "Mirror 'Path Pattern Matching' tests for WatchRegistry."
    ]
    risks: [
      "Performance regressions if naive scanning; keep short critical sections."
    ]
  }

  task {
    name: "Unify Wait/Watch [CONCURRENCY]"
    description: "Reduce mental overhead by having a single authoritative abstraction for waiters (glob and concrete)."
    status: planned
    priority: P2
    acceptance_criteria: [
      "A single abstraction governs waiters; glob/concrete behaviors documented and tested.",
      "No functional regressions; loop=15 remains green; performance notes updated."
    ]
  }

  task {
    name: "Configurable Block Time [FEATURE]"
    description: "Make the per-iteration wait slice tunable to reduce latency variance."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Out options expose a slice duration with a sensible default.",
      "Tests cover small and larger slices; timeout bounds are respected."
    ]
    steps: [
      "Add waitSliceMs (or equivalent) to Out options.",
      "Thread through PathSpace::out loop; respect deadline math.",
      "Update docs and examples."
    ]
  }

  task {
    name: "Backpressure & Queue Limits [DOCS]"
    description: "Clarify behavior under high producer/consumer skew and mitigation strategies."
    status: planned
    priority: P1
    acceptance_criteria: [
      "AI_ARCHITECTURE.md backpressure section documents queue growth, behavior, and mitigation.",
      "Pointers to NodeData queues, task queues, and limits; trade-offs explained."
    ]
  }
}

task {
  name: "Software Renderer Damage Tracking [PERF]"
  description: "Teach PathRenderer2D to diff drawable bounds per target, compute damage rectangles, and restrict background clear, blending, and tile publication to those regions."
  status: planned
  priority: P1

  acceptance_criteria: [
    "Per-target cache tracks previous drawable bounds and clear color; additive strokes only update intersecting tiles.",
    "Removed drawables repaint their previous bounds with the clear color, preventing ghosting.",
    "Clear-color or surface-size changes trigger a safe full-surface repaint.",
    "Tests cover incremental brush strokes, stroke removal, and background changes without regressing existing metrics."
  ]

  steps: [
    "Cache drawable bounding boxes keyed by drawable id and target path.",
    "Compute damage rectangles per revision and clamp rendering/encode loops to those bounds.",
    "Mark only the intersecting progressive tiles dirty when publishing.",
    "Add regression tests exercising incremental paints and full-repaint fallbacks."
  ]
}

task {
  name: "Allocator & PMR Integration [EPIC]"
  description: "Introduce PMR infrastructure, migrate containers, expose a public allocator API, and document with tests and benchmarks."
  status: planned
  priority: P2

  task {
    name: "PMR Infrastructure [FEATURE]"
    description: "Provide a central std::pmr::memory_resource via context; prepare core types for PMR."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Context exposes setMemoryResource/getMemoryResource; null is rejected.",
      "Core containers accept std::pmr::polymorphic_allocator."
    ]
    risks: [
      "Ensure memory_resource lifetime outlives using containers."
    ]
  }

  task {
    name: "PMR Container Migration [PERF]"
    description: "Migrate SlidingBuffer and Node children map to PMR-aware variants."
    status: planned
    priority: P1
    acceptance_criteria: [
      "SlidingBuffer uses std::pmr::vector<uint8_t> with allocator plumbing.",
      "Node::ChildrenMap uses a PMR allocator parameter.",
      "All tests pass loop=15 with default resource."
    ]
    risks: [
      "phmap allocator interactions; validate template parameters and perf."
    ]
  }

  task {
    name: "Allocator API [API]"
    description: "Let users supply a custom memory_resource (e.g., monotonic pools)."
    status: planned
    priority: P1
    acceptance_criteria: [
      "PathSpace constructor/context exposes a setter for memory_resource.",
      "Example demonstrates monotonic_buffer_resource usage."
    ]
  }

  task {
    name: "Allocator Tests [TESTS]"
    description: "Verify containers honor the provided allocator under stress."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Tests use a counting_resource; assertions verify allocation paths.",
      "Stress subcases with many inserts/reads succeed with custom resource."
    ]
  }

  task {
    name: "Allocator Guide [DOCS]"
    description: "Document best practices for allocator integration and lifetimes."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Overview covers custom allocator usage with examples.",
      "Architecture notes summarize allocator-aware components and trade-offs."
    ]
  }

  task {
    name: "Allocator Benchmarks [BENCH]"
    description: "Compare default vs custom allocator throughput/latency and memory usage."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Bench scripts run with default and tuned custom resources; results summarized in docs.",
      "loop=15 remains green under both configurations."
    ]
  }
}

task {
  name: "PathIO Devices & Streams [EPIC]"
  description: "Define PathIO, event models, backends, and CI-friendly simulation; include permissions and streaming/backpressure."
  status: planned
  priority: P2



  task {
    name: "PathIO Architecture [FEATURE]"
    description: "Establish clear, extensible path conventions and semantics for devices."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Header/impl compile; clear path conventions (e.g., /system/devices/in/pointer/<id>, /system/devices/in/text/<id>, /system/devices/in/gamepad/<id>, /system/devices/in/touch/<id>, /system/devices/in/tablet/<id>).",
      "Semantics for read/write, blocking/timeout, and notify are specified."
    ]
  }

  task {
    name: "Input Event Model [API]"
    description: "Define structured, versioned events with serialization."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Event structs for mouse, keyboard, gamepad, touch, tablet include timestamps and device ids.",
      "Serialization/deserialization covered by tests; type-safe reads demonstrated."
    ]
  }

  task {
    name: "Streaming & Backpressure [CONCURRENCY]"
    description: "Handle high-frequency devices without stalling consumers."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Streaming read API or polling guidance with bounded intervals.",
      "Tests simulate bursts without timeouts; dropped-event policy documented if applicable."
    ]
  }

  task {
    name: "Device Permissions [API]"
    description: "Apply permission checks per device path; avoid accidental writes."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Permission callbacks applied for /io/*; denied access returns InvalidPermissions.",
      "Tests cover allowed/denied combinations for read/execute."
    ]
  }

  task {
    name: "Simulated Input Backends [CI]"
    description: "Provide deterministic testing via simulated device backends."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Test-only backend feeds scripted events to PathIO paths.",
      "All PathIO tests pass loop=15 without device access."
    ]
  }

  task {
    name: "Haptics API Stubs [API]"
    description: "Forward path for output devices (e.g., rumble/haptics), initially unimplemented."
    status: planned
    priority: P3
    acceptance_criteria: [
      "Output path conventions documented (e.g., /system/devices/out/gamepad/<id>/rumble).",
      "Calls return clear Unsupported errors until a backend exists."
    ]
  }

  task {
    name: "PathIO CMake Guards [BUILD]"
    description: "Build only supported backends per platform; keep CI portable."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Optional macOS backend target compiles only on macOS.",
      "Linux/Windows stubs compile cleanly; tests use simulation backend on CI."
    ]
  }

  task {
    name: "macOS Input Backends [FEATURE]"
    description: "Concrete backend for macOS (Quartz/CoreGraphics, IOKit, HID)."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Mouse move/click readable via /io/mouse; keyboard keydown/keyup via /io/keyboard.",
      "Notify/wait triggers on event arrival; loop=15 remains green with simulated inputs."
    ]
  }
}

task {
  name: "Device Paths & Policies [EPIC]"
  description: "Define a canonical device path namespace with discovery, defaults, mixing, normalization, hotplug, and policies."
  status: planned
  priority: P1

  task {
    name: "Device Path Namespace [API]"
    description: "Canonical, extensible namespace for device I/O paths."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Canonical paths for devices (e.g., /system/devices/in/<class>/<id>).",
      "Reserved subpaths standardized: events, state, control, meta."
    ]
  }

  task {
    name: "Device Discovery [API]"
    description: "Stable discovery endpoints and metadata."
    status: planned
    priority: P1
    acceptance_criteria: [
      "/system/devices/discovery lists classes; /system/devices/discovery/<class> lists devices; /system/devices/discovery/<class>/<id>/meta returns structured metadata."
    ]
  }

  task {
    name: "Device Capabilities [API]"
    description: "Expose feature flags per device."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Capability descriptors exposed with versioned keys; tests assert presence/absence."
    ]
  }

  task {
    name: "Screen Path API [API]"
    description: "Consistent paths for displays, modes, and optional frame capture."
    status: planned
    priority: P2
    acceptance_criteria: [
      "/screen lists displays; /screen/<id>/meta and /screen/<id>/modes exist and return structured data.",
      "Optional frame capture documented as experimental (simulation-only in tests)."
    ]
  }

  task {
    name: "Default Device Aliases [API]"
    description: "Stable entry points like /system/devices/in/pointer/default that resolve to current device(s)."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Canonical aliases supported for pointer/keyboard/display defaults.",
      "Notify bridging and atomic retargeting are supported."
    ]
  }

  task {
    name: "Pointer Mixer [FEATURE]"
    description: "Aggregate multiple input devices into a single logical pointer stream."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Merged pointer/default stream with deterministic ordering (timestamp then device priority)."
    ]
  }

  task {
    name: "Alias vs Virtual Devices [API]"
    description: "Clarify simple path aliasing vs virtual devices that transform/aggregate events."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Docs specify alias rewrite vs virtual stream semantics; notify/atomic update behavior covered."
    ]
  }

  task {
    name: "Event Normalization [API]"
    description: "Align heterogeneous device reports into a consistent model."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Normalization parameters documented and applied (scaling, axis inversion, offsets).",
      "Calibration adjustable via control; tests verify normalized coordinates."
    ]
  }

  task {
    name: "Hotplug & Defaults [API]"
    description: "Keep default aliases valid as devices appear/disappear."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Alias retarget policy (first-available/preferred) is atomic and notifies readers."
    ]
  }

  task {
    name: "Pointer Conflict Policy [API]"
    description: "Define rules when multiple inputs update the same logical channel."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Policy documented (e.g., timestamp-first, then device-priority); deterministic outcomes in tests."
    ]
  }

  task {
    name: "Timestamped Stream Merge [CONCURRENCY]"
    description: "Implement newest-wins merge with tie-breakers for mixers; ensure events carry timestamps."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Events include monotonic timestamps; mixers implement newest-wins with configurable tie-breakers.",
      "Expose and document 'newest' read/take semantics on merged streams."
    ]
  }

  task {
    name: "Mixer & Alias Simulation [TESTS]"
    description: "CI-deterministic tests for mixer ordering and alias behavior."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Simulated multi-device inputs validate ordering, alias retargeting, and notify bridging."
    ]
  }

  task {
    name: "Path Aliases [FEATURE]"
    description: "Transparent path indirection (akin to symlinks) with notify bridging and cycle detection."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Create/remove aliases programmatically (temporary API).",
      "Notify bridging works; cycles prevented; alias updates atomic."
    ]
  }
}

task {
  name: "PathSpace Paper [EPIC]"
  description: "Plan, write, and package a publishable paper with reproducible artifacts."
  status: planned
  priority: P2
}

task {
  name: "Branch/PR Hygiene For AI [DOCS]"
  description: "Document a clean workflow for AI-authored PRs to avoid stale commits and noisy histories; include branch-from-master, rebase, and cherry-pick guidance."
  status: planned
  priority: P1

  acceptance_criteria: [
    "AI_ARCHITECTURE.md includes a short 'AI pull request workflow' section with concrete git commands.",
    "Instructions cover: branching from origin/master, keeping the branch rebased, creating a clean branch and cherry-picking if started from an old topic branch, and using scripts/create_pr.sh.",
    "Guidance includes how to skip heavy local hooks (SKIP_LOOP_TESTS/SKIP_EXAMPLE) and how to handle non-fast-forward pushes."
  ]

  steps: [
    "Add 'AI pull request workflow' section to docs/AI_ARCHITECTURE.md with exact commands.",
    "Reference scripts/create_pr.sh and examples for typical flows.",
    "Call out how to recover from starting work on an old branch using cherry-pick onto a fresh branch from origin/master.",
    "Note env toggles for local hooks (SKIP_LOOP_TESTS=1, SKIP_EXAMPLE=1) and when to use them."
  ]

  links: [
    "docs/AI_ARCHITECTURE.md"
  ]

  task {
    name: "Select Paper Venue [DOCS]"
    description: "Pick target venue; set template and deadlines."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Venue chosen with deadline and formatting template captured.",
      "Paper skeleton updated to match template."
    ]
  }

  task {
    name: "Paper Outline [DOCS]"
    description: "Establish scope, contributions, and structure."
    status: planned
    priority: P1
    acceptance_criteria: [
      "1–2 page outline with standard sections and clear thesis/contributions."
    ]
  }

  task {
    name: "Related Work Survey [DOCS]"
    description: "Position PathSpace among existing systems."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Annotated bibliography with 10–20 key references; mapping to contributions."
    ]
  }

  task {
    name: "Paper Figures [DOCS]"
    description: "High-level architecture, flows, wait/notify sequence, concurrency model."
    status: planned
    priority: P2
    acceptance_criteria: [
      "At least 4 figures stored as SVG with alt text; referenced in paper and AI docs."
    ]
  }

  task {
    name: "Paper Benchmarks [BENCH]"
    description: "Quantitative support for claims (latency, throughput, scalability)."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Reproducible scripts; results with med/avg/percentiles and graphs; trade-offs discussed."
    ]
  }

  task {
    name: "Paper Artifact Package [DOCS]"
    description: "Reproducible artifact for reviewers/readers."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Tagged release with build/test/replication instructions; CI job validates the path."
    ]
  }

  task {
    name: "Paper Draft [DOCS]"
    description: "Complete draft for internal review."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Draft includes abstract, figures, results, and references; review feedback addressed."
    ]
  }

  task {
    name: "Citation and BibTeX [DOCS]"
    description: "Stable reference for PathSpace versions/releases."
    status: planned
    priority: P3
    acceptance_criteria: [
      "CITATION.cff and docs/citation.md with BibTeX entry and examples."
    ]
  }
}

task {
  name: "WindowEventPump UI Migration [UI]"
  description: "Fold the macOS WindowEventPump presenter/event bridge into the PathSpace UI library so examples stay platform-neutral."
  status: planned
  priority: P1

  acceptance_criteria: [
    "PathWindowView (and supporting UI library code) owns the CAMetalLayer drawable acquisition, Metal/IOSurface present path, and event-loop integration currently implemented in examples/macos/WindowEventPump.mm.",
    "examples/macos/* no longer compile any platform-specific presenter code; they reuse the shared UI bridge.",
    "Docs updated (SceneGraphImplementationPlan.md, AI_ARCHITECTURE.md) to reference the shared presenter instead of the example harness."
  ]

  steps: [
    "Refactor WindowEventPump.mm logic into PathSpace UI components (ObjC++ shim + C++ presenters) while preserving current Metal gating.",
    "Provide a thin example harness that only wires app-specific input/scene setup.",
    "Update examples and tests to consume the shared bridge; remove redundant platform code."
  ]
}

task {
  name: "Logging Allowlist [FEATURE]"
  description: "Keep tests and CI quiet by default; enable targeted categories on demand."
  status: planned
  priority: P2
  acceptance_criteria: [
    "enabledTags allowlist is supported and defaults to empty; skipTags remains for convenience.",
    "Minimal default output; targeted tags can be enabled at runtime."
  ]
  steps: [
    "Add allowlist guard in logging hot path; prefer allowlist if non-empty.",
    "Provide a simple API for toggling tags; document usage."
  ]
}

task {
  name: "macOS CI Job [CI]"
  description: "Add a macOS CI job mirroring loop=15 to catch platform-specific issues."
  status: planned
  priority: P2
  acceptance_criteria: [
    "A macOS job runs ./scripts/compile.sh --clean --test --loop=15.",
    "Branch protection includes both Linux and macOS checks."
  ]
}

task {
  name: "Future Handle Tests [TESTS]"
  description: "Lock in behavior for typed and legacy execution handles."
  status: planned
  priority: P2
  acceptance_criteria: [
    "peekFuture returns a valid Future when an execution exists.",
    "readFuture returns a valid FutureAny for typed tasks; non-blocking and consistent."
  ]
}

task {
  name: "PathFileSystem Enhancements [FEATURE]"
  description: "Round out the PathFileSystem adapter with robust errors and explicit read/write choices."
  status: planned
  priority: P2
  acceptance_criteria: [
    "PathFileSystem.cpp explicitly includes <fstream>.",
    "out() remains read-only for std::string or is extended per design with precise errors.",
    "in() either returns clear Unsupported or supports writing (creating parent dirs optional).",
    "Tests updated to cover write behavior or assert read-only semantics."
  ]
  steps: [
    "Add <fstream>; audit path joining and error messages.",
    "Decide on write semantics; implement or document read-only.",
    "Extend tests accordingly."
  ]
}

task {
  name: "Default Paths & Views [DOCS]"
  description: "Fill in Default Paths and Views documentation with examples mapped to tests."
  status: planned
  priority: P2
  acceptance_criteria: [
    "Views and Default Paths sections describe API, invariants, and examples; cross-references valid."
  ]
}

task {
  name: "Fault Tolerance & Errors [DOCS]"
  description: "Document task exceptions, read/take failures, and shutdown behavior."
  status: planned
  priority: P1
  acceptance_criteria: [
    "Fault Tolerance section describes exception handling, retries (if any), and read/take error codes.",
    "Links to tests exercising exception paths; expected logs clarified."
  ]
}

task {
  name: "HTML Adapter Documentation [DOCS]"
  description: "Capture adapter mode selection, manifests, and runtime negotiation for HTML renderer targets."
  status: planned
  priority: P1
  acceptance_criteria: [
    "docs/AI_ARCHITECTURE.md#html-adapter-modes describes adapter_mode values, shared command stream, and downgrade rules.",
    "Manifest schema example covers runtime module, capability flags, dom_overlays, and schema_version handling.",
    "docs/AI_Plan_SceneGraph_Renderer.md references stay aligned when adapter milestones land."
  ]
}
