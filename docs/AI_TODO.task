// Context update (October 15, 2025): Task priorities now reference the current assistant context; translate legacy context identifiers when reconciling backlogs.
// Handoff note (October 20, 2025): Backlog refreshed after Metal UITests landed and build tooling defaults changed. Review docs/AI_Onboarding_Next.md before resuming work.

task {
  name: "Distributed PathSpace Mounts [FEATURE]"
  description: "Implement remote mount support so PathSpace instances can mount/export subtrees over the network."
  status: planned
  priority: P1

  acceptance_criteria: [
    "Mount manager can attach remote PathSpace subtree under /remote/<alias>/... with read/write parity",
    "Wait/notify and diagnostics propagate across the network",
    "Connections use TLS with authenticated clients and enforce per-subtree ACLs"
  ]

  steps: [
    "Finalize protocol schema and security requirements (Plan_Distributed_PathSpace.md Phase 0)",
    "Build Asio-based secure transport layer and server export + client mount prototype (read/wait)",
    "Extend to full operations, metrics, and error handling",
    "Document usage and update web server plan dependency"
  ]
}

task {
  name: "Web Server Google Sign-In [FEATURE]"
  description: "Add Google OAuth2 (Authorization Code + PKCE) support to the web server authentication flow."
  status: planned
  priority: P1

  acceptance_criteria: [
    "Users can authenticate via Google Sign-In and receive standard PathSpace sessions",
    "Google ID tokens verified (signature, audience) and mapped to PathSpace users",
    "Failure cases (unregistered user, expired token) handled gracefully with audit logs"
  ]

  steps: [
    "Register application in Google Cloud Console; document redirect URIs and config fields",
    "Implement OAuth2 PKCE flow in web server (login redirect, callback handler, session issuance)",
    "Add automated tests mocking Google endpoints; update documentation and debugging playbook"
  ]
}

task {
  name: "JSON Serialization Support [FEATURE]"
  description: "Export PathSpace subtrees to JSON for REST APIs, debugging, and remote inspection."
  status: planned
  priority: P1

  acceptance_criteria: [
    "Expose an API to serialize a subtree (value + children) into JSON with configurable depth/filters",
    "Integrate serialization into web server /api/path responses and SSE payloads",
    "Provide CLI tooling or helper to dump a PathSpace subtree to JSON for debugging"
  ]

  steps: [
    "Design a JSON schema for PathSpace nodes (values, metadata, children, diagnostics)",
    "Implement serializer leveraging NodeData codecs; ensure performance and accurate type representation",
    "Update Plan_WebServer_Adapter.md and docs to reference JSON output, covering debugging workflows"
  ]
}

task {
  name: "Widget Slider & List Builders [FEATURE]"
  description: "Extend the widget toolkit with slider and list builders that publish canonical scenes and metadata alongside the existing button/toggle support."
  status: completed
  priority: P2

  acceptance_criteria: [
    "Builders::Widgets::CreateSlider and CreateList publish canonical scenes under scenes/widgets/<name> with styling hooks and per-widget state paths (value selections, enabled flags).",
    "Widgets::UpdateSliderState / UpdateListState coalesce redundant writes and mark owning scenes DirtyKind::Visual when values change.",
    "Unit tests cover builder outputs, default state, and update helpers; widgets_example showcases both new widgets."
  ]

  steps: [
    "DONE (Oct 20, 2025) Author DrawableBucket snapshots for slider track/thumb and list rows (including selection highlighting).",
    "DONE (Oct 20, 2025) Add style/state structs mirroring button/toggle conventions for the slider; repeat for list when implementing it.",
    "DONE (Oct 20, 2025) Update widgets_example to instantiate the new widgets pending the gallery expansion task."
  ]
}

task {
  name: "Widget Reducer Helpers [FEATURE]"
  description: "Provide reusable reducers that translate widget ops into app-visible actions." 
  status: completed
  priority: P2

  acceptance_criteria: [
    "Helpers drain widgets/<id>/ops/inbox/queue into ops/actions/inbox/queue with stable action structs.",
    "Examples/tests cover at least button activation and list selection flows.",
    "Plan/Onboarding docs reference reducer entry points and follow-up telemetry work." 
  ]

  steps: [
    "DONE (Oct 20, 2025) Implement Widgets::Reducers::{WidgetOpsQueue, ReducePending, PublishActions} helpers with doctest coverage.",
    "DONE (Oct 20, 2025) Update widgets_example.cpp to seed a sample action and print reducer results.",
    "DONE (Oct 20, 2025) Document reducer queues in Plan_SceneGraph_Implementation.md and AI_Onboarding_Next.md." 
  ]
}

task {
  name: "Widget Interaction Bindings [FEATURE]"
  description: "Route widget interactions through a binding layer that watches widget state paths, emits dirty hints, and pushes events into ops inboxes."
  status: completed
  priority: P1

  acceptance_criteria: [
    "Binding helper API diff state payloads and emits dirty hints (instead of full republishes) when widget states change.",
    "Ops inbox schema documented; sample reducers translate button/toggle ops into app state mutations.",
    "Tests exercise hover/press/release flows and confirm auto-render scheduling remains stable (loop=15)."
  ]

  steps: [
    "DONE (Oct 20, 2025) Implemented `Widgets::Bindings::Dispatch{Button,Toggle,Slider}` helpers that diff widget state, submit dirty rect hints, and auto-schedule renders.",
    "DONE (Oct 20, 2025) Defined `WidgetOp` schema under `widgets/<id>/ops/inbox/queue` (documented in Plan_SceneGraph_Implementation.md & AI_Paths.md).",
    "DONE (Oct 20, 2025) Added doctest coverage exercising hover/press/release and slider updates (loop=15 harness)."
  ]
}

task {
  name: "App Builder Defaults [DX]"
  description: "Provide helper APIs that scaffold a minimal PathSpace application (renderer, surface, window bindings) to reduce boilerplate in examples/tests."
  status: planned
  priority: P2

  acceptance_criteria: [
    "New helper(s) create a renderer + surface + window wiring with sensible defaults (software backend, AlwaysLatestComplete policy) given an app root and scene path.",
    "Examples/widgets_example.cpp (or successor) consumes the helper to keep demo code concise.",
    "Documentation explains how to override defaults (e.g., Metal enablement, HTML targets)."
  ]

  steps: [
    "Design a small builder in Builders::App (or similar) that validates app roots, creates renderer/surface/window, and returns typed handles.",
    "Add unit coverage ensuring the helper configures desc/settings consistently with existing manual setup.",
    "Update docs/AI_Onboarding_Next.md to reference the helper for new contributors." 
  ]
}

task {
  name: "Widgets Demo Gallery [DOCS]"
  description: "Promote examples/widgets_example.cpp into a full widget gallery that opens a PathWindowView, renders all widgets, and documents interaction diagnostics."
  status: completed
  priority: P2

  acceptance_criteria: [
    "widgets_example wires published widget scenes into a renderer target + window, rendering button/toggle/slider/list states in a single app.",
    "CLI continues to print widget paths while also opening the window when PATHSPACE_ENABLE_UI is ON.",
    "README-style instructions embedded in the demo (or docs) explain how to run the gallery and inspect widget state updates."
  ]

  steps: [
    "DONE (Oct 21, 2025) Attach widget scenes to a software renderer target and present via PathWindowView while streaming present/FPS telemetry.",
    "DONE (Oct 21, 2025) Added WIDGETS_EXAMPLE_HEADLESS env toggle so headless/test contexts can skip the gallery window.",
    "DONE (Oct 21, 2025) Updated docs/Plan_SceneGraph_Implementation.md with gallery guidance and telemetry follow-ups."
  ]
}

task {
  name: "Software Renderer FPS Parity [PERF]"
  description: "Bring 4K window frame rate in line with small-window performance by reducing per-frame copy work and parallelizing progressive tile fan-out."
  status: in_progress
  priority: P1

  acceptance_criteria: [
    "Progressive tile copy loop uses all available cores; per-frame copy metrics captured before/after.",
    "Dirty-hint bucketing or adaptive tile sizing keeps copied pixel counts proportional to brush area, not full-surface area.",
    "paint_example maintains ≥75 FPS at 2560×1600 and ≥70 FPS at 3840×2160 on reference hardware, with PATHSPACE_TRACE_DAMAGE logs confirming bounded damage regions.",
    "Encode/raster pass is parallelised across dirty tiles; benchmark captures show full-repaint FPS on the reference Mac Studio more than doubles vs the current single-threaded baseline.",
    "Docs updated (Plan_SceneGraph_Implementation.md, Plan_SceneGraph_Renderer.md, AI_Debugging_Playbook.md) with the new algorithm, metrics flag guidance, and measured results."
  ]

  steps: [
    "Fork progressive tile copy to a worker pool; measure scaling vs core count.",
    "Prototype adaptive tile sizing or merge heuristics that shrink damage for narrow hints.",
    "Assess IOSurface reuse/presenter path to avoid full-buffer copies when not required.",
    "Shard PathRenderer2D encode work across per-tile jobs, ensure blending remains deterministic, and measure encode_ms deltas.",
    "Capture before/after traces (PATHSPACE_TRACE_DAMAGE=1, PATHSPACE_UI_DAMAGE_METRICS=1) and summarize in docs."
  ]
}

task {
  name: "Paint Demo Stroke Compositing [EXP]"
  description: "Prototype a compositing path so paint_example bakes strokes into a persistent texture (or coalesced drawable) instead of retaining every rect command."
  status: optional
  priority: P2

  acceptance_criteria: [
    "Prototype keeps paint_example FPS stable during long sessions by constraining drawable growth.",
    "Toggle or config documented so regression tests can keep exercising the existing stroke-per-drawable path."
  ]

  steps: [
    "Investigate lightweight texture compositing or stroke decimation strategies for the demo.",
    "Measure performance vs. current approach and capture findings in docs/Plan_SceneGraph_Implementation.md.",
    "Decide whether to upstream as default or leave as optional mode."
  ]
}

task {
  name: "Wait/Watch Semantics [EPIC]"
  description: "Unify wait/notify semantics and read-blocking behavior under one coherent model, including glob watches, time-slicing, and backpressure guidance."
  status: planned
  priority: P1

  task {
    name: "Glob Watch Support [FEATURE]"
    description: "Align wait/notify with WaitMap's glob semantics to unify blocking reads and notifications."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Waiting on a glob path (e.g., \"/a/*/c\") wakes on matching concrete notifications.",
      "Existing glob tests are extended or mirrored to cover WatchRegistry paths.",
      "No deadlocks or self-wake races; loop=15 remains green."
    ]
    steps: [
      "Index glob waiters efficiently; avoid O(N) scans.",
      "Use the same registry for concrete and glob waiters in PathSpace::out.",
      "Mirror 'Path Pattern Matching' tests for WatchRegistry."
    ]
    risks: [
      "Performance regressions if naive scanning; keep short critical sections."
    ]
  }

  task {
    name: "Unify Wait/Watch [CONCURRENCY]"
    description: "Reduce mental overhead by having a single authoritative abstraction for waiters (glob and concrete)."
    status: planned
    priority: P2
    acceptance_criteria: [
      "A single abstraction governs waiters; glob/concrete behaviors documented and tested.",
      "No functional regressions; loop=15 remains green; performance notes updated."
    ]
  }

  task {
    name: "Configurable Block Time [FEATURE]"
    description: "Make the per-iteration wait slice tunable to reduce latency variance."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Out options expose a slice duration with a sensible default.",
      "Tests cover small and larger slices; timeout bounds are respected."
    ]
    steps: [
      "Add waitSliceMs (or equivalent) to Out options.",
      "Thread through PathSpace::out loop; respect deadline math.",
      "Update docs and examples."
    ]
  }

  task {
    name: "Backpressure & Queue Limits [DOCS]"
    description: "Clarify behavior under high producer/consumer skew and mitigation strategies."
    status: planned
    priority: P1
    acceptance_criteria: [
      "AI_Architecture.md backpressure section documents queue growth, behavior, and mitigation.",
      "Pointers to NodeData queues, task queues, and limits; trade-offs explained."
    ]
  }
}

task {
  name: "Software Renderer Damage Tracking [PERF]"
  description: "Teach PathRenderer2D to diff drawable bounds per target, compute damage rectangles, and restrict background clear, blending, and tile publication to those regions."
  status: planned
  priority: P1

  acceptance_criteria: [
    "Per-target cache tracks previous drawable bounds and clear color; additive strokes only update intersecting tiles.",
    "Removed drawables repaint their previous bounds with the clear color, preventing ghosting.",
    "Clear-color or surface-size changes trigger a safe full-surface repaint.",
    "Tests cover incremental brush strokes, stroke removal, and background changes without regressing existing metrics."
  ]

  steps: [
    "Cache drawable bounding boxes keyed by drawable id and target path.",
    "Compute damage rectangles per revision and clamp rendering/encode loops to those bounds.",
    "Mark only the intersecting progressive tiles dirty when publishing.",
    "Add regression tests exercising incremental paints and full-repaint fallbacks."
  ]
}

task {
  name: "Allocator & PMR Integration [EPIC]"
  description: "Introduce PMR infrastructure, migrate containers, expose a public allocator API, and document with tests and benchmarks."
  status: planned
  priority: P2

  task {
    name: "PMR Infrastructure [FEATURE]"
    description: "Provide a central std::pmr::memory_resource via context; prepare core types for PMR."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Context exposes setMemoryResource/getMemoryResource; null is rejected.",
      "Core containers accept std::pmr::polymorphic_allocator."
    ]
    risks: [
      "Ensure memory_resource lifetime outlives using containers."
    ]
  }

  task {
    name: "PMR Container Migration [PERF]"
    description: "Migrate SlidingBuffer and Node children map to PMR-aware variants."
    status: planned
    priority: P1
    acceptance_criteria: [
      "SlidingBuffer uses std::pmr::vector<uint8_t> with allocator plumbing.",
      "Node::ChildrenMap uses a PMR allocator parameter.",
      "All tests pass loop=15 with default resource."
    ]
    risks: [
      "phmap allocator interactions; validate template parameters and perf."
    ]
  }

  task {
    name: "Allocator API [API]"
    description: "Let users supply a custom memory_resource (e.g., monotonic pools)."
    status: planned
    priority: P1
    acceptance_criteria: [
      "PathSpace constructor/context exposes a setter for memory_resource.",
      "Example demonstrates monotonic_buffer_resource usage."
    ]
  }

  task {
    name: "Allocator Tests [TESTS]"
    description: "Verify containers honor the provided allocator under stress."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Tests use a counting_resource; assertions verify allocation paths.",
      "Stress subcases with many inserts/reads succeed with custom resource."
    ]
  }

  task {
    name: "Allocator Guide [DOCS]"
    description: "Document best practices for allocator integration and lifetimes."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Overview covers custom allocator usage with examples.",
      "Architecture notes summarize allocator-aware components and trade-offs."
    ]
  }

  task {
    name: "Allocator Benchmarks [BENCH]"
    description: "Compare default vs custom allocator throughput/latency and memory usage."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Bench scripts run with default and tuned custom resources; results summarized in docs.",
      "loop=15 remains green under both configurations."
    ]
  }
}

task {
  name: "PathIO Devices & Streams [EPIC]"
  description: "Define PathIO, event models, backends, and CI-friendly simulation; include permissions and streaming/backpressure."
  status: planned
  priority: P2



  task {
    name: "PathIO Architecture [FEATURE]"
    description: "Establish clear, extensible path conventions and semantics for devices."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Header/impl compile; clear path conventions (e.g., /system/devices/in/pointer/<id>, /system/devices/in/text/<id>, /system/devices/in/gamepad/<id>, /system/devices/in/touch/<id>, /system/devices/in/tablet/<id>).",
      "Semantics for read/write, blocking/timeout, and notify are specified."
    ]
  }

  task {
    name: "Input Event Model [API]"
    description: "Define structured, versioned events with serialization."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Event structs for mouse, keyboard, gamepad, touch, tablet include timestamps and device ids.",
      "Serialization/deserialization covered by tests; type-safe reads demonstrated."
    ]
  }

  task {
    name: "Streaming & Backpressure [CONCURRENCY]"
    description: "Handle high-frequency devices without stalling consumers."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Streaming read API or polling guidance with bounded intervals.",
      "Tests simulate bursts without timeouts; dropped-event policy documented if applicable."
    ]
  }

  task {
    name: "Device Permissions [API]"
    description: "Apply permission checks per device path; avoid accidental writes."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Permission callbacks applied for /io/*; denied access returns InvalidPermissions.",
      "Tests cover allowed/denied combinations for read/execute."
    ]
  }

  task {
    name: "Simulated Input Backends [CI]"
    description: "Provide deterministic testing via simulated device backends."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Test-only backend feeds scripted events to PathIO paths.",
      "All PathIO tests pass loop=15 without device access."
    ]
  }

  task {
    name: "Haptics API Stubs [API]"
    description: "Forward path for output devices (e.g., rumble/haptics), initially unimplemented."
    status: planned
    priority: P3
    acceptance_criteria: [
      "Output path conventions documented (e.g., /system/devices/out/gamepad/<id>/rumble).",
      "Calls return clear Unsupported errors until a backend exists."
    ]
  }

  task {
    name: "PathIO CMake Guards [BUILD]"
    description: "Build only supported backends per platform; keep CI portable."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Optional macOS backend target compiles only on macOS.",
      "Linux/Windows stubs compile cleanly; tests use simulation backend on CI."
    ]
  }

  task {
    name: "macOS Input Backends [FEATURE]"
    description: "Concrete backend for macOS (Quartz/CoreGraphics, IOKit, HID)."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Mouse move/click readable via /io/mouse; keyboard keydown/keyup via /io/keyboard.",
      "Notify/wait triggers on event arrival; loop=15 remains green with simulated inputs."
    ]
  }
}

task {
  name: "Device Paths & Policies [EPIC]"
  description: "Define a canonical device path namespace with discovery, defaults, mixing, normalization, hotplug, and policies."
  status: planned
  priority: P1

  task {
    name: "Device Path Namespace [API]"
    description: "Canonical, extensible namespace for device I/O paths."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Canonical paths for devices (e.g., /system/devices/in/<class>/<id>).",
      "Reserved subpaths standardized: events, state, control, meta."
    ]
  }

  task {
    name: "Device Discovery [API]"
    description: "Stable discovery endpoints and metadata."
    status: planned
    priority: P1
    acceptance_criteria: [
      "/system/devices/discovery lists classes; /system/devices/discovery/<class> lists devices; /system/devices/discovery/<class>/<id>/meta returns structured metadata."
    ]
  }

  task {
    name: "Device Capabilities [API]"
    description: "Expose feature flags per device."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Capability descriptors exposed with versioned keys; tests assert presence/absence."
    ]
  }

  task {
    name: "Screen Path API [API]"
    description: "Consistent paths for displays, modes, and optional frame capture."
    status: planned
    priority: P2
    acceptance_criteria: [
      "/screen lists displays; /screen/<id>/meta and /screen/<id>/modes exist and return structured data.",
      "Optional frame capture documented as experimental (simulation-only in tests)."
    ]
  }

  task {
    name: "Default Device Aliases [API]"
    description: "Stable entry points like /system/devices/in/pointer/default that resolve to current device(s)."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Canonical aliases supported for pointer/keyboard/display defaults.",
      "Notify bridging and atomic retargeting are supported."
    ]
  }

  task {
    name: "Pointer Mixer [FEATURE]"
    description: "Aggregate multiple input devices into a single logical pointer stream."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Merged pointer/default stream with deterministic ordering (timestamp then device priority)."
    ]
  }

  task {
    name: "Alias vs Virtual Devices [API]"
    description: "Clarify simple path aliasing vs virtual devices that transform/aggregate events."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Docs specify alias rewrite vs virtual stream semantics; notify/atomic update behavior covered."
    ]
  }

  task {
    name: "Event Normalization [API]"
    description: "Align heterogeneous device reports into a consistent model."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Normalization parameters documented and applied (scaling, axis inversion, offsets).",
      "Calibration adjustable via control; tests verify normalized coordinates."
    ]
  }

  task {
    name: "Hotplug & Defaults [API]"
    description: "Keep default aliases valid as devices appear/disappear."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Alias retarget policy (first-available/preferred) is atomic and notifies readers."
    ]
  }

  task {
    name: "Pointer Conflict Policy [API]"
    description: "Define rules when multiple inputs update the same logical channel."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Policy documented (e.g., timestamp-first, then device-priority); deterministic outcomes in tests."
    ]
  }

  task {
    name: "Timestamped Stream Merge [CONCURRENCY]"
    description: "Implement newest-wins merge with tie-breakers for mixers; ensure events carry timestamps."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Events include monotonic timestamps; mixers implement newest-wins with configurable tie-breakers.",
      "Expose and document 'newest' read/take semantics on merged streams."
    ]
  }

  task {
    name: "Mixer & Alias Simulation [TESTS]"
    description: "CI-deterministic tests for mixer ordering and alias behavior."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Simulated multi-device inputs validate ordering, alias retargeting, and notify bridging."
    ]
  }

  task {
    name: "Path Aliases [FEATURE]"
    description: "Transparent path indirection (akin to symlinks) with notify bridging and cycle detection."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Create/remove aliases programmatically (temporary API).",
      "Notify bridging works; cycles prevented; alias updates atomic."
    ]
  }
}

task {
  name: "PathSpace Paper [EPIC]"
  description: "Plan, write, and package a publishable paper with reproducible artifacts."
  status: planned
  priority: P2
}

task {
  name: "Branch/PR Hygiene For AI [DOCS]"
  description: "Document a clean workflow for AI-authored PRs to avoid stale commits and noisy histories; include branch-from-master, rebase, and cherry-pick guidance."
  status: planned
  priority: P1

  acceptance_criteria: [
    "AI_Architecture.md includes a short 'AI pull request workflow' section with concrete git commands.",
    "Instructions cover: branching from origin/master, keeping the branch rebased, creating a clean branch and cherry-picking if started from an old topic branch, and using scripts/create_pr.sh.",
    "Guidance includes how to skip heavy local hooks (SKIP_LOOP_TESTS/SKIP_EXAMPLE) and how to handle non-fast-forward pushes."
  ]

  steps: [
    "Add 'AI pull request workflow' section to docs/AI_Architecture.md with exact commands.",
    "Reference scripts/create_pr.sh and examples for typical flows.",
    "Call out how to recover from starting work on an old branch using cherry-pick onto a fresh branch from origin/master.",
    "Note env toggles for local hooks (SKIP_LOOP_TESTS=1, SKIP_EXAMPLE=1) and when to use them."
  ]

  links: [
    "docs/AI_Architecture.md"
  ]

  task {
    name: "Select Paper Venue [DOCS]"
    description: "Pick target venue; set template and deadlines."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Venue chosen with deadline and formatting template captured.",
      "Paper skeleton updated to match template."
    ]
  }

  task {
    name: "Paper Outline [DOCS]"
    description: "Establish scope, contributions, and structure."
    status: planned
    priority: P1
    acceptance_criteria: [
      "1–2 page outline with standard sections and clear thesis/contributions."
    ]
  }

  task {
    name: "Related Work Survey [DOCS]"
    description: "Position PathSpace among existing systems."
    status: planned
    priority: P2
    acceptance_criteria: [
      "Annotated bibliography with 10–20 key references; mapping to contributions."
    ]
  }

  task {
    name: "Paper Figures [DOCS]"
    description: "High-level architecture, flows, wait/notify sequence, concurrency model."
    status: planned
    priority: P2
    acceptance_criteria: [
      "At least 4 figures stored as SVG with alt text; referenced in paper and AI docs."
    ]
  }

  task {
    name: "Paper Benchmarks [BENCH]"
    description: "Quantitative support for claims (latency, throughput, scalability)."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Reproducible scripts; results with med/avg/percentiles and graphs; trade-offs discussed."
    ]
  }

  task {
    name: "Paper Artifact Package [DOCS]"
    description: "Reproducible artifact for reviewers/readers."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Tagged release with build/test/replication instructions; CI job validates the path."
    ]
  }

  task {
    name: "Paper Draft [DOCS]"
    description: "Complete draft for internal review."
    status: planned
    priority: P1
    acceptance_criteria: [
      "Draft includes abstract, figures, results, and references; review feedback addressed."
    ]
  }

  task {
    name: "Citation and BibTeX [DOCS]"
    description: "Stable reference for PathSpace versions/releases."
    status: planned
    priority: P3
    acceptance_criteria: [
      "CITATION.cff and docs/citation.md with BibTeX entry and examples."
    ]
  }
}

task {
  name: "Logging Allowlist [FEATURE]"
  description: "Keep tests and CI quiet by default; enable targeted categories on demand."
  status: planned
  priority: P2
  acceptance_criteria: [
    "enabledTags allowlist is supported and defaults to empty; skipTags remains for convenience.",
    "Minimal default output; targeted tags can be enabled at runtime."
  ]
  steps: [
    "Add allowlist guard in logging hot path; prefer allowlist if non-empty.",
    "Provide a simple API for toggling tags; document usage."
  ]
}

task {
  name: "macOS CI Job [CI]"
  description: "Add a macOS CI job mirroring loop=15 to catch platform-specific issues."
  status: planned
  priority: P2
  acceptance_criteria: [
    "A macOS job runs ./scripts/compile.sh --clean --test --loop=15.",
    "Branch protection includes both Linux and macOS checks."
  ]
}

task {
  name: "Future Handle Tests [TESTS]"
  description: "Lock in behavior for typed and legacy execution handles."
  status: planned
  priority: P2
  acceptance_criteria: [
    "peekFuture returns a valid Future when an execution exists.",
    "readFuture returns a valid FutureAny for typed tasks; non-blocking and consistent."
  ]
}

task {
  name: "PathFileSystem Enhancements [FEATURE]"
  description: "Round out the PathFileSystem adapter with robust errors and explicit read/write choices."
  status: planned
  priority: P2
  acceptance_criteria: [
    "PathFileSystem.cpp explicitly includes <fstream>.",
    "out() remains read-only for std::string or is extended per design with precise errors.",
    "in() either returns clear Unsupported or supports writing (creating parent dirs optional).",
    "Tests updated to cover write behavior or assert read-only semantics."
  ]
  steps: [
    "Add <fstream>; audit path joining and error messages.",
    "Decide on write semantics; implement or document read-only.",
    "Extend tests accordingly."
  ]
}

task {
  name: "Default Paths & Views [DOCS]"
  description: "Fill in Default Paths and Views documentation with examples mapped to tests."
  status: planned
  priority: P2
  acceptance_criteria: [
    "Views and Default Paths sections describe API, invariants, and examples; cross-references valid."
  ]
}

task {
  name: "Fault Tolerance & Errors [DOCS]"
  description: "Document task exceptions, read/take failures, and shutdown behavior."
  status: planned
  priority: P1
  acceptance_criteria: [
    "Fault Tolerance section describes exception handling, retries (if any), and read/take error codes.",
    "Links to tests exercising exception paths; expected logs clarified."
  ]
}

task {
  name: "HTML Adapter Documentation [DOCS]"
  description: "Capture adapter mode selection, manifests, and runtime negotiation for HTML renderer targets."
  status: planned
  priority: P1
  acceptance_criteria: [
    "docs/AI_Architecture.md#html-adapter-modes describes adapter_mode values, shared command stream, and downgrade rules.",
    "Manifest schema example covers runtime module, capability flags, dom_overlays, and schema_version handling.",
    "docs/Plan_SceneGraph_Renderer.md references stay aligned when adapter milestones land."
  ]
}
task {
  name: "Adopt std::serialization when available [TECHDEBT]"
  description: "Track the standard C++ serialization facility and plan migration away from Alpaca/manual serializers once compilers ship stable support."
  status: planned
  priority: P3

  acceptance_criteria: [
    "Evaluate compiler support for std::serialization (Networking/Serialization TS or subsequent standard)",
    "Prototype migrating NodeData serialization to the standard facility without regressing performance",
    "Document migration plan and compatibility strategy for older compilers"
  ]

  steps: [
    "Monitor WG21 progress; update this task when serialization ships in mainstream toolchains",
    "Draft migration checklist (feature flags, fallback to Alpaca)",
    "Run benchmarks comparing standard serialization vs current implementation"
  ]
}
task {
  name: "PathSpace Symlinks Support [FEATURE]"
  description: "Introduce symlink-like aliases so nodes can appear under multiple paths, enabling observability mirrors and flexible mounts."
  status: planned
  priority: P3

  acceptance_criteria: [
    "Design and document symlink semantics (creation, resolution, loop detection)",
    "Implement symlink storage/resolution in PathSpace with capability checks",
    "Demonstrate mirroring of diagnostics paths via symlinks (used by distributed mounts/inspector)"
  ]

  steps: [
    "Draft symlink design doc covering lifecycle and security",
    "Prototype symlink nodes and resolver in PathSpace",
    "Integrate with distributed mount diagnostics once stable"
  ]
}
