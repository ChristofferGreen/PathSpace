################################################################################
# C++ std::atomic Suppressions
# 
# Atomic operations in C++ are thread-safe by design but Helgrind flags them
# as potential race conditions. These suppressions prevent those false positives.
################################################################################

# Suppress atomic store operations (e.g., atomic.store(), atomic = value)
{
  atomic_ops_store
  Helgrind:Race
  fun:store
}

# Suppress atomic load operations (e.g., atomic.load(), value = atomic)
{
  atomic_ops_load
  Helgrind:Race
  fun:load
}

################################################################################
# C++ Smart Pointer Reference Counting Suppressions
#
# shared_ptr and weak_ptr use atomic reference counting internally for 
# thread-safety. These suppressions prevent false positives from the reference 
# counting mechanisms that track object lifetime.
################################################################################

# Suppress reference count operations (increment/decrement/read)
{
  shared_ptr_refcount
  Helgrind:Race
  fun:*_Sp_counted_base*
}

# Suppress weak_ptr specific operations
{
   weak_ptr_control_block
   Helgrind:Race
   fun:*_Sp_counted_ptr_inplace*
}

{
   condition_variable_wait_for
   Helgrind:Misc
   fun:*condition_variable*wait*
}

{
   task_pool_atomic_workers
   Helgrind:Race
   fun:*TaskPool*activeWorkers*
}