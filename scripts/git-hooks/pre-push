#!/usr/bin/env bash
# Git pre-push hook entrypoint
# This hook delegates to the repository helper at scripts/git-hooks/pre-push.local.sh
# so we can keep all logic versioned in-repo while the hook remains a thin wrapper.
#
# Installation (from repo root):
#   ln -sf ../../scripts/git-hooks/pre-push .git/hooks/pre-push
#   chmod +x scripts/git-hooks/pre-push .git/hooks/pre-push
#
# Environment toggles (forwarded to the helper):
#   SKIP_LOOP_TESTS=1       -> skip the looped tests
#   SKIP_EXAMPLE=1          -> skip the example app smoke test
#   BUILD_TYPE=Release      -> override build type (Default: Release)
#   JOBS=N                  -> parallel build jobs (Default: system CPU count)
#   PATHSPACE_CMAKE_ARGS=.. -> extra CMake args (quoted)
#   ENABLE_PATHIO_MACOS=ON  -> on macOS, enable PathIO macOS backends in the example build

set -euo pipefail

say()  { printf "\033[1;34m[pre-push]\033[0m %s\n" "$*"; }
ok()   { printf "\033[1;32m[pre-push]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[pre-push]\033[0m %s\n" "$*"; }
err()  { printf "\033[1;31m[pre-push]\033[0m %s\n" "$*" >&2; }

resolve_repo_root() {
  # Try git first (works when this is installed under .git/hooks)
  if command -v git >/dev/null 2>&1; then
    if ROOT="$(git rev-parse --show-toplevel 2>/dev/null)"; then
      printf "%s\n" "$ROOT"
      return 0
    fi
  fi

  # Fallback: derive from this script's location if it's under scripts/git-hooks/
  # shellcheck disable=SC2292
  local src="${BASH_SOURCE[0]:-$0}"
  local here
  here="$(cd "$(dirname "$src")" && pwd -P)"
  case "$here" in
    */scripts/git-hooks)
      # repo_root/scripts/git-hooks -> go up two levels
      (cd "$here/../.." && pwd -P)
      return 0
      ;;
    */.git/hooks)
      # .git/hooks -> parent of .git
      (cd "$here/.." && cd .. && pwd -P)
      return 0
      ;;
    *)
      # Last resort: current working directory
      pwd -P
      return 0
      ;;
  esac
}

main() {
  local ROOT
  ROOT="$(resolve_repo_root)"

  local helper="$ROOT/scripts/git-hooks/pre-push.local.sh"
  if [[ ! -f "$helper" ]]; then
    err "Missing helper script: $helper"
    err "Ensure you have the repository checked out with scripts present."
    exit 1
  fi
  if [[ ! -x "$helper" ]]; then
    warn "Helper is not executable; attempting to set +x: $helper"
    chmod +x "$helper" || {
      err "Failed to mark helper as executable. Please run: chmod +x '$helper'"
      exit 1
    }
  fi

  say "Delegating to $helper"
  exec "$helper" "$@"
}

main "$@"
